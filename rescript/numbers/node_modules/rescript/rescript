#!/usr/bin/env node
//@ts-check
"use strict";

/**
 * This script is supposed to be running in project root directory
 * It matters since we need read .sourcedirs(location)
 * and its content are file/directories with regard to project root
 */

var bsc_exe = require("./scripts/bin_path").bsc_exe;
var rescript_exe = require("./scripts/bin_path").rescript_exe;
var bsb = require("./scripts/rescript_bsb");

var cwd = process.cwd();
process.env.BSB_PROJECT_ROOT = cwd;

if (process.env.NINJA_ANSI_FORCED === undefined) {
  if (require("tty").isatty(1)) {
    process.env.NINJA_ANSI_FORCED = "1";
  }
} else {
  if (process.argv.includes("-verbose")) {
    console.log(`NINJA_ANSI_FORCED: "${process.env.NINJA_ANSI_FORCED}"`);
  }
}

const helpMessage = `Usage: rescript <options> <subcommand>

\`rescript\` is equivalent to \`rescript build\`

Options:
  -v, -version  display version number
  -h, -help     display help

Subcommands:
  build
  clean
  format
  convert
  dump
  help

Run \`rescript <subcommand> -h\` for subcommand help. Examples:
  rescript build -h
  rescript format -h`;

function onUncaughtException(err) {
  console.error("Uncaught Exception", err);
  bsb.releaseBuild();
  process.exit(1);
}

function exitProcess() {
  bsb.releaseBuild();
  process.exit(0);
}

process.on("uncaughtException", onUncaughtException);

// OS signal handlers
// Ctrl+C
process.on("SIGINT", exitProcess);
// kill pid
try {
  process.on("SIGUSR1", exitProcess);
  process.on("SIGUSR2", exitProcess);
  process.on("SIGTERM", exitProcess);
  process.on("SIGHUP", exitProcess);
} catch (_e) {
  // Deno might throw an error here, see https://github.com/denoland/deno/issues/9995
  // TypeError: Windows only supports ctrl-c (SIGINT) and ctrl-break (SIGBREAK).
}

const process_argv = process.argv;
const maybeSubcommand = process_argv[2];

if (!maybeSubcommand) {
  bsb.build([]);
} else {
  switch (maybeSubcommand) {
    case "info": {
      bsb.info(process_argv.slice(3));
      break;
    }
    case "clean": {
      bsb.clean(process_argv.slice(3));
      break;
    }
    case "build": {
      bsb.build(process_argv.slice(3));
      break;
    }
    case "format":
      require("./scripts/rescript_format.js").main(
        process.argv.slice(3),
        rescript_exe,
        bsc_exe
      );
      break;
    case "dump":
      require("./scripts/rescript_dump.js").main(
        process.argv.slice(3),
        rescript_exe,
        bsc_exe
      );
      break;
    case "convert":
      require("./scripts/rescript_convert.js").main(
        process.argv.slice(3),
        rescript_exe,
        bsc_exe
      );
      break;
    case "-h":
    case "-help":
    case "--help":
    case "help":
      console.log(helpMessage);
      break;
    case "-v":
    case "-version":
    case "--version":
    case "version":
      console.log(require("./package.json").version);
      break;
    default:
      if (maybeSubcommand.startsWith("-")) {
        bsb.build(process_argv.slice(2));
      } else {
        console.error(
          `Error: Unknown command "${maybeSubcommand}".\n${helpMessage}`
        );
        process.exit(2);
      }
  }
}
